[package]
name = "neo-types"
description = "Neo N3 types"

authors.workspace = true
version.workspace = true
edition.workspace = true
rust-version.workspace = true
license.workspace = true
repository.workspace = true
homepage.workspace = true
categories.workspace = true
keywords.workspace = true
exclude.workspace = true

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
uint = { git = "https://github.com/paritytech/parity-common", package = "uint", version = "0.9", default-features = false }
primitive-types = { version = "0.12", features = ["byteorder", "rustc-hex"], default-features = false }
impl-codec = { version = "0.6", default-features = false, optional = true }
impl-serde = { version = "0.4.0", default-features = false, optional = true }
scale-info = { version = ">=1.0, <3", features = ["derive"], default-features = false, optional = true }
base64 = "0.21.4"
futures = "0.3.28"
sha2 = "0.10.8"
serde_derive.workspace = true
p256 = "0.13.2"
bs58.workspace = true
hex = { version = "0.4.3", features = [] }
rustc-serialize = { version = "0.3.24", features = [] }
rand = "0.8.5"
serde.workspace = true
num-bigint = "0.4.4"
chrono = "0.4.31"
strum_macros = "0.25.2"
strum = "0.25"
num_enum = "0.7.0"
derive_more.workspace = true
bincode = "2.0.0-rc.3"
sha3 = "0.10.8"
tokio = "1.32.0"
getset.workspace = true
reqwest = { version = "0.11", features = ["blocking"] }
num-traits = { version = "0.2.16", features = [] }
thiserror = { version = "1.0.49", features = [] }
generic-array = "1.0.0"
tiny-keccak = { version = "2.0.0", features = ["sha3"] }
elliptic-curve = "0.13.6"
neo-config.workspace=true
neo-codec.workspace=true
blake2.workspace=true
serde_json.workspace = true
serde_with.workspace = true
ethereum-types.workspace = true
educe.workspace = true
neo-crypto.workspace = true
serde-big-array.workspace = true
ring = { version = "0.16.20", features = [] }
signature = { version = "2.1.0", features = [] }

[features]
default = ["std", "serialize"]
std = ["uint/std", "primitive-types/std"]
serialize = ["impl-serde", "primitive-types/serde_no_std"]
arbitrary = [ "uint/arbitrary"]
codec = ["impl-codec","scale-info", "primitive-types/scale-info"]
num-traits = ["primitive-types/num-traits"]


