[package]
name = "neo-providers"
authors = ["R3E Network <jimmy@r3e.network>"]
readme = "README.md"
description = "Clients for interacting with Neo nodes"

version.workspace = true
edition.workspace = true
rust-version.workspace = true
license.workspace = true
documentation.workspace = true
repository.workspace = true
homepage.workspace = true
categories.workspace = true
keywords.workspace = true
exclude.workspace = true

[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]

[package.metadata.playground]
all-features = true

[dependencies]

serde.workspace = true
serde_json = { workspace = true, features = ["raw_value"] }

#http = "1.0.0"
reqwest = { workspace = true, features = ["json"] }
url.workspace = true
base64 = "0.21"
jsonwebtoken = "9.2.0"

getset.workspace = true
async-trait.workspace = true
hex.workspace = true
thiserror.workspace = true
auto_impl.workspace = true
once_cell.workspace = true
bytes.workspace = true
instant.workspace = true
bs58.workspace=true
hashers = "1.0"

# required for implementing stream on the filters
futures-core.workspace = true
futures-util.workspace = true
futures-timer.workspace = true
futures-channel = { workspace = true, optional = true }
pin-project.workspace = true
# tracing
tracing = { workspace = true, features = ["attributes"] }
tracing-futures = { workspace = true, features = ["std-future"] }

neo-types.workspace = true
neo-crypto.workspace = true
neo-codec.workspace = true
neo-config.workspace=true
#neo-signers.workspace = true
primitive-types.workspace = true
lazy_static = "1.4.0"
log = { version = "0.4.20", features = [] }

strum_macros = "0.25.2"
strum = "0.25.0"
num-bigint = "0.4.4"
num-traits = "0.2.16"
num_enum = "0.7.0"
serde_derive = { version = "1.0.188", features = [] }
educe = "0.5"
hex-literal = "0.4.1"
rustc-serialize = "0.3.24"
derive_more = "0.99"
#bincode = "1.3.3"

[target.'cfg(target_family = "windows")'.dependencies]
winapi = { version = "0.3", optional = true }

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
# tokio
tokio = { workspace = true, features = ["time"] }
tokio-tungstenite = { workspace = true, features = ["connect"], optional = true }

[target.'cfg(target_arch = "wasm32")'.dependencies]
ws_stream_wasm = "0.7"
wasm-bindgen = "0.2"
wasm-bindgen-futures = "0.4"
web-sys = { version = "0.3", features = ["console"] }

[target.'cfg(not(target_arch = "wasm32"))'.dev-dependencies]
tokio = { workspace = true, features = ["rt-multi-thread", "macros", "time"] }
tempfile = "3"

[features]
default = ["ws", "rustls"]

ws = ["tokio-tungstenite", "futures-channel"]
legacy-ws = ["ws"]
ipc = ["tokio/io-util", "futures-channel", "winapi"]

# we use the webpki roots so we can build static binaries w/o any root cert dependencies
# on the host
rustls = ["tokio-tungstenite/rustls-tls-webpki-roots", "reqwest/rustls-tls"]
openssl = ["tokio-tungstenite/native-tls", "reqwest/native-tls"]
dev-rpc = []

[dev-dependencies]
tracing-test = { version = "0.2.4", features = ["no-env-filter"] }
